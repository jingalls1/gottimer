{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","d","Date","_this2","interval","setInterval","setState","time","now","clearInterval","nowD","getTime","t","days","Math","floor","hours","mins","secs","react_default","a","createElement","className","style","lineHeight","href","src","alt","border","height","fontWeight","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAKqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,EAAG,IAAIC,MAFLT,mFAKC,IAAAU,EAAAP,KAClBA,KAAKQ,SAAWC,YACd,kBAAMF,EAAKG,SAAS,CAAEC,KAAML,KAAKM,SACjC,oDAIFC,cAAcb,KAAKQ,2CAInB,IAAIM,GAAO,IAAIR,MAAOS,UAElBC,EADO,IAAIV,KAAK,KAAM,EAAG,GAAI,GAAI,EAAG,GACzBQ,EACXG,EAAOC,KAAKC,MAAMH,EAAC,OACnBI,EAAQF,KAAKC,MAAOH,EAAC,MAAF,MACnBK,EAAOH,KAAKC,MAAOH,EAAC,KAAF,KAClBM,EAAOJ,KAAKC,MAAOH,EAAC,IAAkB,KAC1C,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,WAAY,OACzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,wCACAH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,WAAY,OACzBL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,8CACNN,EAAAC,EAAAC,cAAA,OACEK,IAAI,6EACJC,IAAI,uBACJC,OAAO,IACPC,OAAO,QAGXV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,8CACNN,EAAAC,EAAAC,cAAA,OACEK,IAAI,6EACJC,IAAI,uBACJC,OAAO,IACPC,OAAO,QAGXV,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,WAAY,OACzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,uBACAH,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,wBAIFH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,WAAY,OACzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEO,WAAY,SAAWjB,GADxC,aAEEM,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEO,WAAY,SAAWd,GAFxC,cAGEG,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEO,WAAY,SAAWb,GAHxC,oBAIEE,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEO,WAAY,SAAWZ,GAJxC,YAMAC,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEC,WAAY,OACzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,qCA/DyBS,IAAMC,YCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17c86525.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { d: new Date() };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(\n      () => this.setState({ time: Date.now() }),\n      1000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    let nowD = new Date().getTime();\n    let gotD = new Date(2019, 3, 21, 18, 0, 0);\n    let t = gotD - nowD;\n    let days = Math.floor(t / (1000 * 60 * 60 * 24));\n    let hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    let mins = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n    let secs = Math.floor((t % (1000 * 60)) / 1000);\n    return (\n      <div className=\"App\">\n        <br style={{ lineHeight: \"5\" }} />\n        <div className=\"title\">alright fuckers, episode 2 is coming</div>\n        <br style={{ lineHeight: \"3\" }} />\n        <a href=\"https://fontmeme.com/game-of-thrones-font/\">\n          <img\n            src=\"https://fontmeme.com/permalink/190414/9c428af13e849ebeaf654eac74ddd240.png\"\n            alt=\"game-of-thrones-font\"\n            border=\"0\"\n            height=\"40\"\n          />\n        </a>\n        <br />\n        <a href=\"https://fontmeme.com/game-of-thrones-font/\">\n          <img\n            src=\"https://fontmeme.com/permalink/190414/63fb69d3a6a03b392c36fc128d308473.png\"\n            alt=\"game-of-thrones-font\"\n            border=\"0\"\n            height=\"30\"\n          />\n        </a>\n        <br style={{ lineHeight: \"5\" }} />\n        <div className=\"season\"> Season 8 Episode 2</div>\n        <div>\n        { /* <img src=\"http://i.imgur.com/MAOay7V.png\" height=\"90\" /> */}\n        {/*  <img src=\"https://i.imgur.com/NggooP0.png\" height=\"90\" /> */}\n          <span className=\"episode\">\"Episode Title TBA\"</span>\n        {/*  <img src=\"http://i.imgur.com/AU1SENm.png\" height=\"100\" /> */}\n        {/*  <img src=\"http://i.imgur.com/DSj7dEF.png\" height=\"85\" /> */}\n        </div>\n        <br style={{ lineHeight: \"2\" }} />\n        <div className=\"white\">\n          <span style={{ fontWeight: \"bold\" }}>{days}</span> days &nbsp;\n          <span style={{ fontWeight: \"bold\" }}>{hours}</span> hours &nbsp;\n          <span style={{ fontWeight: \"bold\" }}>{mins}</span> minutes and &nbsp;\n          <span style={{ fontWeight: \"bold\" }}>{secs}</span> seconds\n        </div>\n        <br style={{ lineHeight: \"5\" }} />\n        <div className=\"yosemite\">&copy; Yosemite Productions</div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}